import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { IAuth, ILoginState } from '../../app/types';
import { login } from './loginAPI';
import { removeBearerFromFetchService, setBearerToFetchService } from '../../common/services/fetch';
import { getTokenFromCookie, removeTokenFromCookie, setTokenToCookie } from '../../common/utils';

// on the initial load, check if the cookie is existed in cookie;
// if existed, then set to axios instance and set the initialState as logged user
const getToken = getTokenFromCookie();
if (getToken) setBearerToFetchService(getToken);

// This is the global state. App-wide states will be store here
const initialState: ILoginState = {
    isAuthenticated: !!getToken,
    isLoading: false,
    error: null,
};

const loginSlice = createSlice({
    name: 'login-slice',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setLogin: (state, action: PayloadAction<IAuth>) => {
            state.isAuthenticated = true;
            setBearerToFetchService(action.payload.id);
            setTokenToCookie(action.payload.id, action.payload.expiresIn);
        },
        logout: state => {
            state.isAuthenticated = false;
            removeBearerFromFetchService();
            removeTokenFromCookie();
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: builder => {
        builder
            .addCase(login.pending, state => {
                state.isLoading = true;
                state.error = null;
            })
            .addCase(login.fulfilled, (state, action: PayloadAction<IAuth>) => {
                state.isLoading = false;
                loginSlice.caseReducers.setLogin(state, action);
            })
            .addCase(login.rejected, (state, action) => {
                state.isLoading = false;
                state.error = action.payload as string;
            });
    },
});

const { reducer: loginReducer, actions } = loginSlice;

export const { logout } = actions;

export default loginReducer;
